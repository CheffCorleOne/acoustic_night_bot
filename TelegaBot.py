# main.py
import os
import json
import logging
from datetime import datetime
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)
from fastapi import FastAPI
from uvicorn import Server, Config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –¥–ª—è keep-alive
app = FastAPI()

@app.get("/")
def read_root():
    return {"status": "active", "timestamp": datetime.now().isoformat()}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    CHOOSE_ACTION,
    SELECT_GENRE,
    SELECT_INSTRUMENTS,
    PROJECT_DESCRIPTION,
    SET_DEADLINE,
    CONFIRM_PROJECT
) = range(6)

class CollaborationBot:
    def __init__(self):
        self.user_data_file = "users.json"
        self.users = self.load_users()
        self.genres = ["Rock", "Jazz", "Pop", "Classical", "Electronic"]
        self.instruments = [
            "Vocals", "Guitar", "Piano", "Drums",
            "Bass", "Violin", "Saxophone", "Production"
        ]

    def load_users(self):
        try:
            with open(self.user_data_file, "r") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def save_users(self):
        with open(self.user_data_file, "w") as f:
            json.dump(self.users, f, indent=2)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é"""
        user = update.effective_user
        keyboard = [
            [
                InlineKeyboardButton("üéµ –ù–∞–π—Ç–∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é", callback_data="find_collab"),
                InlineKeyboardButton("üí° –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create_project")
            ],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤ –¥–ª—è:\n"
            "‚Ä¢ –°–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –ó–∞–ø–∏—Å–∏ –∫–∞–≤–µ—Ä–æ–≤\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º—É–∑—ã–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSE_ACTION

    async def handle_project_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()
        
        # –®–∞–≥ 1: –í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞
        keyboard = [
            [InlineKeyboardButton(genre, callback_data=f"genre_{genre}")]
            for genre in self.genres
        ]
        await query.edit_message_text(
            "üé∂ –í—ã–±–µ—Ä–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∂–∞–Ω—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECT_GENRE

    async def handle_instrument_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–Ω—Ä
        genre = query.data.replace("genre_", "")
        context.user_data["genre"] = genre
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        keyboard = [
            [InlineKeyboardButton(instr, callback_data=f"instr_{instr}")]
            for instr in self.instruments
        ]
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_instruments")])
        
        await query.edit_message_text(
            "üéπ –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECT_INSTRUMENTS

    async def handle_project_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if "instruments" not in context.user_data:
            context.user_data["instruments"] = []
        
        if query.data.startswith("instr_"):
            instrument = query.data.replace("instr_", "")
            context.user_data["instruments"].append(instrument)
            return SELECT_INSTRUMENTS
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await query.edit_message_text(
            "üìù –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            "‚Ä¢ –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞\n"
            "‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
            "‚Ä¢ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫\n"
            "‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏"
        )
        return PROJECT_DESCRIPTION

    async def handle_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
        context.user_data["description"] = update.message.text
        
        keyboard = [
            [
                InlineKeyboardButton("‚è∞ –£–∫–∞–∑–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="set_deadline"),
                InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Å—Ä–∞–∑—É", callback_data="no_deadline")
            ]
        ]
        await update.message.reply_text(
            "üìÖ –•–æ—á–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SET_DEADLINE

    async def save_project(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–¥–ª–∞–π–Ω
        if query.data == "set_deadline":
            await query.edit_message_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024):")
            return SET_DEADLINE
        
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        user_id = str(update.effective_user.id)
        self.users[user_id] = {
            "project": context.user_data,
            "timestamp": datetime.now().isoformat(),
            "matches": []
        }
        self.save_users()
        
        # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        matches = self.find_matches(user_id)
        response = "üéâ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω! –ú—ã —É–∂–µ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
        
        if matches:
            response += "\n\nüîç –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:\n"
            response += "\n".join([f"‚Ä¢ {u['username']} ({', '.join(u['instruments'])})" for u in matches[:3]])
        
        await query.edit_message_text(response)
        return ConversationHandler.END

    def find_matches(self, project_owner_id: str):
        """–ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –∏ –∂–∞–Ω—Ä—É"""
        project = self.users.get(project_owner_id, {}).get("project", {})
        matches = []
        
        for user_id, data in self.users.items():
            if user_id == project_owner_id:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            common_instruments = set(project.get("instruments", [])) & set(data.get("instruments", []))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∂–∞–Ω—Ä–∞
            genre_match = data.get("genre") == project.get("genre")
            
            if common_instruments and genre_match:
                matches.append({
                    "user_id": user_id,
                    "username": data.get("username"),
                    "instruments": list(common_instruments)
                })
        
        return sorted(matches, key=lambda x: len(x["instruments"]), reverse=True)[:5]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
def run_bot():
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    application = Application.builder().token(bot_token).build()

    collab_bot = CollaborationBot()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", collab_bot.start)],
        states={
            CHOOSE_ACTION: [
                CallbackQueryHandler(collab_bot.handle_project_creation, pattern="^create_project$"),
                # –î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
            ],
            SELECT_GENRE: [
                CallbackQueryHandler(collab_bot.handle_instrument_selection, pattern="^genre_")
            ],
            SELECT_INSTRUMENTS: [
                CallbackQueryHandler(collab_bot.handle_project_description, pattern="^done_instruments$"),
                CallbackQueryHandler(collab_bot.handle_instrument_selection, pattern="^instr_")
            ],
            PROJECT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, collab_bot.handle_deadline)
            ],
            SET_DEADLINE: [
                CallbackQueryHandler(collab_bot.save_project, pattern="^no_deadline$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, collab_bot.save_project)
            ]
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server = Server(Config(app=app, host="0.0.0.0", port=8000))
    Thread(target=server.run).start()
    
    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    run_bot()
